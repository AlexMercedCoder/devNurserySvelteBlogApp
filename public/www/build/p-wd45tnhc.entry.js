import{r as t,c as s,g as i}from"./p-bdbc0325.js";import"./p-20de5b5b.js";import{A as h}from"./p-454f1ce0.js";const r=class{constructor(i){t(this,i),this.readyEventEmitter=s(this,"ready",7),this.resultEventEmitter=s(this,"result",7)}componentWillLoad(){this.startSubscription()}onPropsChange(){this.stopSubscription(),this.startSubscription()}componentDidUnload(){this.stopSubscription()}getResult(){return{data:this.originalResult&&this.originalResult.data,loading:!this.originalResult||this.originalResult.loading,error:{graphQLErrors:this.originalResult&&this.originalResult.errors,networkError:void 0,message:this.originalResult&&this.originalResult.errors&&this.originalResult.errors[0]&&this.originalResult.errors[0].message,name:this.originalResult&&this.originalResult.errors&&this.originalResult.errors[0]&&this.originalResult.errors[0].name,extraInfo:this.originalResult&&this.originalResult.errors&&this.originalResult.errors[0]&&this.originalResult.errors[0].originalError},variables:this.variables,networkStatus:this.originalResult&&this.originalResult.networkStatus,refetch:this.observable&&this.observable.refetch.bind(this.observable),fetchMore:this.observable&&this.observable.fetchMore.bind(this.observable),startPolling:this.observable&&this.observable.startPolling.bind(this.observable),stopPolling:this.observable&&this.observable.stopPolling.bind(this.observable),subscribeToMore:this.observable&&this.observable.subscribeToMore.bind(this.observable),updateQuery:this.observable&&this.observable.updateQuery.bind(this.observable),client:this.client}}startSubscription(){if(!this.client)throw new Error("You should wrap your parent component with apollo-provider custom element or ApolloProvider functional component");{const t=this.client.watchQuery(Object.assign({query:this.query,variables:this.variables},this.options));this._subscription=t.subscribe(t=>{this.originalResult=t,this.resultEventEmitter.emit(this.getResult())},t=>{this.error=t,this.resultEventEmitter.emit(this.getResult())}),this.readyEventEmitter.emit(this.getResult())}}stopSubscription(){this._subscription&&this._subscription.unsubscribe()}render(){return this.renderer&&this.renderer(this.getResult())}get el(){return i(this)}static get watchers(){return{client:["onPropsChange"],query:["onPropsChange"],variables:["onPropsChange"],renderer:["onPropsChange"],options:["onPropsChange"]}}};h.injectProps(r,["client"]);export{r as apollo_query};